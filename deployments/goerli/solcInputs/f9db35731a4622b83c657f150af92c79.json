{
  "language": "Solidity",
  "sources": {
    "contracts/ConfessionDapp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nerror ConfessionDapp__NotOwner();\n\ncontract ConfessionDapp {\n    address public immutable i_deployer;\n    string[] public confessions; // store only confessions string in an array\n\n    event newConfession(string confession);\n\n    constructor() {\n        i_deployer = msg.sender;\n        confessions.push(\n            \"Hi, this is the genesis confession produced by the creator of this contract. WAGMI!\"\n        );\n    }\n\n    function confess(string memory confession) public {\n        confessions.push(confession);\n        emit newConfession(confession);\n    }\n\n    function clearConfessions() public{\n        if(msg.sender != i_deployer){\n            revert ConfessionDapp__NotOwner();\n        }\n        confessions = new string [](0); // resetting the confessions array [NEVER USED IN PRODUCTION DEPLOYMENT]\n    }\n\n    /** Getters */\n    function getDeployer() public view returns (address) {\n        return i_deployer;\n    }\n\n    function getConfessions() public view returns (string[] memory) {\n        return confessions;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}